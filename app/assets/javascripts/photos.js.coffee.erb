# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

class Picker
  constructor: (pickerContainer, @values) ->
    @picker$ = $(pickerContainer)
    @picker$.find('.picker-inc').on 'click', =>
      @inc()
    @picker$.find('.picker-dec').on 'click', =>
      @dec()
  current: =>
    @picker$.find('.picker-val').html()
  inc: =>
    index = $.inArray @current(), @values
    next = @values[(index + 1) % @values.length]
    @update next
  dec: =>
    index = $.inArray @current(), @values
    prev = @values[if index == 0 then @values.length - 1 else index - 1]
    @update prev
  update: (value) =>
    @picker$.find('.picker-val').html value
    @picker$.find('.picker-hidden-val').val value

photoHoverOn = ->
  $(this).find('.stats').stop().animate({'opacity': 0.6})
  $(this).find('.thumb-title').stop().animate({'opacity': 0.6})
photoHoverOff = ->
  $(this).find('.stats').stop().animate({'opacity': 0})
  $(this).find('.thumb-title').stop().animate({'opacity': 0})

class window.AlertMessages
  constructor: () ->
    @container$ = $('#alerts')
  attach: (html) =>
    @container$.empty().html($(html))
  template: (alertClass) ->
    ret = $('<div class="alert alert-dismissible"><button class="close" type="close" data-dismiss="alert" aria-hidden=""> Ã— </button>')
    ret.addClass(alertClass)
  notice: (msg) =>
    notice = $(@template 'alert-success')
    @attach notice.append(msg)
  info:   (msg) =>
    info = $(@template 'alert-info')
    @attach info.append(msg)
  alert:  (msg) =>
    warning = $(@template 'alert-warning')
    @attach warning.append(msg)
  danger: (msg) =>
    danger = $(@template 'alert-danger')
    @attach danger.append(msg)

jQuery ->
  $('.photo').addClass('hover-enabled').hover photoHoverOn, photoHoverOff

  <% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
  select2Options = 
    placeholder: 'Add Tags'
    tokenSeparators: [',']
    minimumInputLength: 2
    multiple: true
    containerCssClass: 'tags-picker'
    initSelection: (el, callback) -> 
      data = []
      values = $(el).val().split ','
      $.each values, (i, val) ->
        data.push id: val, text: val
      callback data
    createSearchChoice: (term) ->
      id: term
      text: term
    ajax:
      url: '/tags'
      dataType: 'json'
      data: (term, page) ->
        q: term
      results: (data, page) ->
        res = []
        $.each data, (i, n) ->
          res.push
            id: n
            text: n
        results: res

  $('.select2:not(#select2-query)').select2 select2Options

  months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  years = (''+i for i in [1990..2014])

  monthPicker = new Picker '#month-picker', months
  yearPicker  = new Picker '#year-picker', years

  select2SearchOptions =
    placeholder: 'Search by tag'
    multiple: false

  select2QueryOptions = $.extend {}, select2Options, select2SearchOptions
  # remove new/edit specifics
  delete select2QueryOptions.initSelection
  
  $('#select2-query').select2 select2QueryOptions

  $('#select2-query').on 'change', ->
    tag = $(this).select2('data').text
    window.location = '/photos?tag=' + encodeURIComponent(tag)

  jscrollOptions = 
    nextSelector: '#pagination a.next'
    loadingHtml: '<i class="fa fa-spinner fa-spin"></i>'
    #contentSelector: '#photo-wall'
    padding: 500
    callback: ->
      added$ = $('.jscroll-added')
      
      latest = added$.find('li.photo')
      pagination = added$.find('#pagination')

      $('.jscroll-added').remove()
      $('#photos #photo-wall ul').append $(latest)
      $('#photo-wall .photo:not(.hover-enabled)').
        addClass('hover-enabled').
        hover photoHoverOn, photoHoverOff
      if pagination.children().length > 1
        $('#photo-wall').append $(pagination)

  $('#photos #photo-wall').jscroll(jscrollOptions)

  fadeCopyRight = ->
    message$ = $('#photo-wrapper .photo-copyright')
    message$.animate
      opacity: 0
    message$.css('display', 'none').removeClass('show')


  $('#photo-wrapper img').bind 'contextmenu', (evt) ->
    return false if $('#photo-wrapper .photo-copyright').hasClass('show')
    offset = $(this).offset()
    $('#photo-wrapper .photo-copyright').
      addClass('show').
      css('opacity', 1).
      css('display', 'block').
      css('left', evt.pageX).
      css('top', evt.pageY)
    setTimeout(fadeCopyRight, 1500)
    false

  voteBtn$ = $('#photo-vote')

  voteBtn$.on 'click', (evt) ->
    $.ajax
      url: 'http://jsonip.com/'
      dataType: 'json'
    .done (data) ->
      voteByIp data.ip
    .fail () ->
      voteByIp false
    false

  voteByIp = (ip) ->
    if (ip)
      url = voteBtn$.closest('form').attr('action')
      $.ajax
        url: url
        type: 'POST'
        data:
          remote_ip: ip
      .done (data) ->
        if data.success
          new AlertMessages().notice(data.message)
          $('#photo-votes').html(data.votes)
        else
          new AlertMessages().alert(data.message)
      .fail (data) ->
        new AlertMessages().danger(data.message)
    else
      new AlertMessages().danger('Voting did not succeed. Please try again later.')
    false